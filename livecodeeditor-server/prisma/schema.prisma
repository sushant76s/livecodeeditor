// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String
  email           String         @unique
  password        String
  profilePhoto    String?        // Optional
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Inverse relation for rooms where the user is part of a room (Many-to-many)
  rooms           Room[]         @relation("UserRooms")

  // Relation for room admin (One-to-many)
  adminRooms      Room[]         @relation("RoomAdmin")

  // Personal chat relations (One-to-many)
  personalChats   PersonalChat[] @relation("SenderChats")
  receivedChats   PersonalChat[] @relation("ReceiverChats")

  // Inverse relation for connected users
  connectedUsers  ConnectedUser[]

  // Inverse relation for room chats
  roomChats       RoomChat[]
}

model Room {
  id              Int            @id @default(autoincrement())
  roomId          String         @unique
  roomName        String
  roomAdmin       User           @relation("RoomAdmin", fields: [roomAdminId], references: [id])
  roomAdminId     Int
  createdAt       DateTime       @default(now())

  // Inverse relation for users that are part of this room (Many-to-many)
  users           User[]         @relation("UserRooms")

  codeSnippets    CodeSnippet[]
  connectedUsers  ConnectedUser[]
  roomChats       RoomChat[]
  personalChats   PersonalChat[]
}

model CodeSnippet {
  id              Int            @id @default(autoincrement())
  content         String
  room            Room           @relation(fields: [roomId], references: [id])
  roomId          Int
}

model ConnectedUser {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  room            Room           @relation(fields: [roomId], references: [id])
  roomId          Int
}

model RoomChat {
  id              Int            @id @default(autoincrement())
  message         String
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  room            Room           @relation(fields: [roomId], references: [id])
  roomId          Int
  createdAt       DateTime       @default(now())
}

model PersonalChat {
  id              Int            @id @default(autoincrement())
  message         String
  sender          User           @relation("SenderChats", fields: [senderId], references: [id])
  senderId        Int
  receiver        User           @relation("ReceiverChats", fields: [receiverId], references: [id])
  receiverId      Int
  room            Room           @relation(fields: [roomId], references: [id])
  roomId          Int
  createdAt       DateTime       @default(now())
}
